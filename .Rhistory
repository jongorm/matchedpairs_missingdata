g = df$G
h = df$H
i = df$I
j = df$J
#interactions (only 21 due to aliasing)
ab = a*b
ac = a*c
ad = a*d
ae = a*e
af = a*f
ag = a*g
ah = a*h
ai = a*i
aj = a*j
bc = b*c
bd = b*d
be = b*e
bf = b*f
bg = b*g
bh = b*h
bi = b*i
bj = b*j
cd = c*d
ce = c*e
cf = c*f
cg = c*g
ch = c*h
ci = c*i
cj = c*j
de = d*e
df = d*f
dg = d*g
dh = d*h
di = d*i
dj = d*j
ef = e*f
eg = e*g
eh = e*h
ei = e*i
ej = e*j
fg = f*g
fh = f*h
fi = f*i
fj = f*j
gh = g*h
gi = g*i
gj = g*j
hi = h*i
hj = h*j
ij = i*j
AB = as.factor(ab)
AC = as.factor(ac)
AD = as.factor(ad)
AE = as.factor(ae)
AF = as.factor(af)
AG = as.factor(ag)
AH = as.factor(ah)
AI = as.factor(ai)
AJ = as.factor(aj)
BC = as.factor(bc)
BD = as.factor(bd)
BE = as.factor(be)
BF = as.factor(bf)
BG = as.factor(bg)
BH = as.factor(bh)
BI = as.factor(bi)
BJ = as.factor(bj)
CD = as.factor(cd)
CE = as.factor(ce)
CF = as.factor(cf)
CG = as.factor(cg)
CH = as.factor(ch)
CI = as.factor(ci)
CJ = as.factor(cj)
DE = as.factor(de)
DF = as.factor(df)
DG = as.factor(dg)
DH = as.factor(dh)
DI = as.factor(di)
DJ = as.factor(dj)
EF = as.factor(ef)
EG = as.factor(eg)
EH = as.factor(eh)
EI = as.factor(ei)
EJ = as.factor(ej)
FG = as.factor(fg)
FH = as.factor(fh)
FI = as.factor(fi)
FJ = as.factor(fj)
GH = as.factor(gh)
GI = as.factor(gi)
GJ = as.factor(gj)
HI = as.factor(hi)
HJ = as.factor(hj)
IJ = as.factor(ij)
#put all variables (including interactions) into a dataframe
df_interaction = data.frame(log_response, response, order, A, B, C, D, E, F, G, H, I, J, AB, AC, AD, AE, AF, AG, AH, AI, AJ, BC, BD, BE, BF, BG, BH, BI, BJ, CD, CE, CF, CG, CH, CI, CJ, DE, DF, DG, DH, DI, DJ, EF, EG, EH, EI, EJ, FG, FH, FI, FJ, GH, GI, GJ, HI, HJ, IJ)
#a, b, c, d, e, f, g, h, i, j, ab, ac, ad, ae, af, ag, ah, ai, aj, bc, bd, be, bf, bg, bh, cd, ce, cf, cg, de, df)
#model = lm(response ~ a + b + c + d + e + f + g + h + i + j + ab + ac + ad + ae + af + ag + ah + ai + aj + bc + bd + be + bf + bg + bh + cd + ce + cf + cg + de + df, data=df_interaction)
#summary(model)
model2 = lm(response ~ A + B + C + D + E + F + G + H + I + J + AB + AC + AD + AE + AF + AG + AH + AI + AJ + BC + BD + BE + BF + BG + BH + BI + BJ + CD + CE + CF + CG + CH + CI + CJ + DE + DF + DG + DH + DI + DJ + EF + EG + EH + EI + EJ + FG + FH + FI + FJ + GH + GI + GJ + HI + HJ + IJ, data=df_interaction)
model_main = lm(response ~ A + B + C + D + E + F + G + H + I + J, data=df_interaction)
summary(model2)
summary(model_main)
#model_interaction = lm(response ~ AB + AC + AD + AE + AF + AG + AH + AI + AJ + BC + BD + BE + BF + BG + BH + CD + CE + CF + CG + DE + DF, data=df_interaction)
#summary(model_interaction)
#Make a main effect plot for all effects
MEPlot(model_main, abbrev = 5, cex.xax=1.6, cex.main=2)
summary(model2)
summary(model_main)
#Make a plot of the effects
model2_coef = model2$coef
model2_coef_noint = model2_coef[-c(1)]
sort_model2_coef_noint = model2_coef_noint[order(model2_coef_noint)]
labels = names(sort_model2_coef_noint)
ip = ppoints(length(sort_model2_coef_noint))
zp = qnorm(ip)
par(bg=rgb(1,1,0.8))
plot(zp, sort_model2_coef_noint,
ylab="Parameter Estimate", xlab="Theoretical Quantiles",
main="Normal Probability Plot of Model Effects")
qqline(sort_model2_coef_noint, col=2)
abline(h=0, col=4)
#label plot
text(zp, sort_model2_coef_noint, labels = labels, data=df_interaction, pos=2, cex=0.7, font=0.4)
#significance plot
DanielPlot(model2, half = TRUE, autolab = FALSE)
#Plot new model with A, B, C, D, E, J, AJ, DE, AB, CE
model_refined = lm(response ~ C + E + CE, data=df_interaction)
summary(model_refined)
#lack of fit test
lof = factor(paste(CE, IJ, EI))
inner = lm(response ~ CE + IJ + EI, data=df_interaction)
outer = lm(response~lof)
anova(inner, outer)
#a, b, c, d, e, f, g, h, i, j, ab, ac, ad, ae, af, ag, ah, ai, aj, bc, bd, be, bf, bg, bh, cd, ce, cf, cg, de, df)
#model = lm(response ~ a + b + c + d + e + f + g + h + i + j + ab + ac + ad + ae + af + ag + ah + ai + aj + bc + bd + be + bf + bg + bh + cd + ce + cf + cg + de + df, data=df_interaction)
#summary(model)
model2 = lm(response ~ A + B + C + D + E + F + G + H + I + J + AB + AC + AD + AE + AF + AG + AH + AI + AJ + BC + BD + BE + BF + BG + BH + BI + BJ + CD + CE + CF + CG + CH + CI + CJ + DE + DF + DG + DH + DI + DJ + EF + EG + EH + EI + EJ + FG + FH + FI + FJ + GH + GI + GJ + HI + HJ + IJ, data=df_interaction)
model_main = lm(response ~ A + B + C + D + E + F + G + H + I + J, data=df_interaction)
summary(model2)
#Plot new model with A, B, C, D, E, J, AJ, DE, AB, CE
model_refined = lm(response ~ CE, data=df_interaction)
summary(model_refined)
#Plot new model with A, B, C, D, E, J, AJ, DE, AB, CE
model_refined = lm(response ~ C + CE, data=df_interaction)
summary(model_refined)
#Plot new model with A, B, C, D, E, J, AJ, DE, AB, CE
model_refined = lm(response ~ C + E + CE, data=df_interaction)
summary(model_refined)
#Plot new model with A, B, C, D, E, J, AJ, DE, AB, CE
model_refined = lm(response ~ C + E + CE + IJ + EI, data=df_interaction)
summary(model_refined)
#Plot new model with A, B, C, D, E, J, AJ, DE, AB, CE
model_refined = lm(response ~ C + E + CE + IJ + EI + GJ, data=df_interaction)
summary(model_refined)
#Plot new model with A, B, C, D, E, J, AJ, DE, AB, CE
model_refined = lm(response ~ G + CE + IJ + EI + GJ, data=df_interaction)
summary(model_refined)
plot(model_refined)
#model_interaction = lm(response ~ AB + AC + AD + AE + AF + AG + AH + AI + AJ + BC + BD + BE + BF + BG + BH + CD + CE + CF + CG + DE + DF, data=df_interaction)
#summary(model_interaction)
#Make a main effect plot for all effects
MEPlot(model_main, abbrev = 5, cex.xax=1.6, cex.main=2)
#Anova of refined model
anova_model = aov(response ~ C + E + I + J + CE + IJ + EI, data=df_interaction)
summary(anova_model)
#Anova of refined model
anova_model = aov(response ~ A + B + C + E +I + J, data=df_interaction)
summary(anova_model)
plan <- FrF2(10, 128)
plan <- FrF2(128, 10)
plan
plan <- add.response(response)
plan <- add.response(response=response)
library(FrF2)
#Load data
df <- read.table("D:\\Data\\Classes\\AMS_582\\total14_final.csv", sep=',', header=TRUE)
#Save variables as factors
order = df$order #order of runs
response = df$y #response variable
log_response = log(response)
A = as.factor(df$A)
B = as.factor(df$B)
C = as.factor(df$C)
D = as.factor(df$D)
E = as.factor(df$E)
F = as.factor(df$F)
G = as.factor(df$G)
H = as.factor(df$H)
I = as.factor(df$I)
J = as.factor(df$J)
#save variables as vectors
a = df$A
b = df$B
c = df$C
d = df$D
e = df$E
f = df$F
g = df$G
h = df$H
i = df$I
j = df$J
#interactions (only 21 due to aliasing)
ab = a*b
ac = a*c
ad = a*d
ae = a*e
af = a*f
ag = a*g
ah = a*h
ai = a*i
aj = a*j
bc = b*c
bd = b*d
be = b*e
bf = b*f
bg = b*g
bh = b*h
bi = b*i
bj = b*j
cd = c*d
ce = c*e
cf = c*f
cg = c*g
ch = c*h
ci = c*i
cj = c*j
de = d*e
df = d*f
dg = d*g
dh = d*h
di = d*i
dj = d*j
ef = e*f
eg = e*g
eh = e*h
ei = e*i
ej = e*j
fg = f*g
fh = f*h
fi = f*i
fj = f*j
gh = g*h
gi = g*i
gj = g*j
hi = h*i
hj = h*j
ij = i*j
AB = as.factor(ab)
AC = as.factor(ac)
AD = as.factor(ad)
AE = as.factor(ae)
AF = as.factor(af)
AG = as.factor(ag)
AH = as.factor(ah)
AI = as.factor(ai)
AJ = as.factor(aj)
BC = as.factor(bc)
BD = as.factor(bd)
BE = as.factor(be)
BF = as.factor(bf)
BG = as.factor(bg)
BH = as.factor(bh)
BI = as.factor(bi)
BJ = as.factor(bj)
CD = as.factor(cd)
CE = as.factor(ce)
CF = as.factor(cf)
CG = as.factor(cg)
CH = as.factor(ch)
CI = as.factor(ci)
CJ = as.factor(cj)
DE = as.factor(de)
DF = as.factor(df)
DG = as.factor(dg)
DH = as.factor(dh)
DI = as.factor(di)
DJ = as.factor(dj)
EF = as.factor(ef)
EG = as.factor(eg)
EH = as.factor(eh)
EI = as.factor(ei)
EJ = as.factor(ej)
FG = as.factor(fg)
FH = as.factor(fh)
FI = as.factor(fi)
FJ = as.factor(fj)
GH = as.factor(gh)
GI = as.factor(gi)
GJ = as.factor(gj)
HI = as.factor(hi)
HJ = as.factor(hj)
IJ = as.factor(ij)
plan <- FrF2(128, 10)
plan <- add.response(response=response)
plan <- FrF2(128, 10)
plan = add.response(plan, response)
IAPlot(plan, abbrev = 5, show.alias = TRUE, lwd = 2, cex = 2, cex.xax = 1.2, cex.lab = 1.5)
IAPlot(plan, abbrev = 5, show.alias = TRUE, lwd = 2, cex = 2, cex.xax = 1.2, cex.lab = 1.5)
summary(lm(plan))
View(plan)
type(plan)
typeof(plan)
View(plan)
plan = data.frame(a, b, c, d, e, f, g, h, i, j, response)
IAPlot(plan, abbrev = 5, show.alias = TRUE, lwd = 2, cex = 2, cex.xax = 1.2, cex.lab = 1.5)
plan2 = FrF2(plan)
plan = data.frame(a, b, c, d, e, f, g, h, i, j, response)
plan2 = FrF2(plan)
IAPlot(plan, abbrev = 5, show.alias = TRUE, lwd = 2, cex = 2, cex.xax = 1.2, cex.lab = 1.5)
summary(lm(plan))
View(plan)
plan <- FrF2(128, 10)
plan = add.response(plan, response)
View(plan)
plan[,1]
plan[1,]
plan[1,] = c(-1, -1,	-1,	-1,	-1,	-1,	-1,	1,	1,	1)
plan <- FrF2(128, 10)
plan[1,] = c(-1, -1,	-1,	-1,	-1,	-1,	-1,	1,	1,	1)
plan[1,]
summary(lm(plan))
plan = add.response(plan, response)
IAPlot(plan, abbrev = 5, show.alias = TRUE, lwd = 2, cex = 2, cex.xax = 1.2, cex.lab = 1.5)
summary(lm(plan))
df_plan <- df[-c(1,12)]
df_plan
df_plan <- subset(df, c(A, B, C, D, E, F, G, H, I, J))
df_plan <- subset(df, select=c(A, B, C, D, E, F, G, H, I, J))
df_plan <- df[,c("A")]
df_plan <- df[ ,c("A")]
df_plan <- df[c("A", "B")]
df_plan
df
df <- data.frame(df)
df_plan <- df[c("A", "B")]
df_plan <- df[c(1)]
View(df_plan)
df_plan <- df[c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11)]
df_plan <- df[c("A", "B")]
df_plan <- data.frame(a, b, c, d, e, f, g, h, i, j)
View(df_plan)
seq(1, 128)
df_plan <- data.frame(a, b, c, d, e, f, g, h, i, j)
plan <- FrF2(128, 10)
for (i in seq(1, 128)){
plan[i,] = df_plan[i,]
}
plan = add.response(plan, response)
View(plan)
IAPlot(plan, abbrev = 5, show.alias = TRUE, lwd = 2, cex = 2, cex.xax = 1.2, cex.lab = 1.5)
summary(lm(plan))
#lack of fit test
lof = factor(paste(CE, IJ, EI))
#Plot new model with A, B, C, D, E, J, AJ, DE, AB, CE
model_refined = lm(response ~ CE + IJ + EI, data=df_interaction)
summary(model_refined)
df <- read.csv("D:\\Data\\Office_Docs\\Excel\\JohnEnoch_JBB_data.csv", header=TRUE)
df <- read.csv("D:\\Data\\Office_Docs\\Excel\\JohnEnoch_JBB_data.csv", header=TRUE)
View(df)
dim(df)
dim(df)[0]
dim(df)[[0]]
dim(df)[0]
c(dim(df))[0]
View(df)
length(df$UH.Loop.Load..kBTU.)
library(sqldf)
install.packages("sqldf")
library(sqldf)
View(df)
df_ref <- sqldf('SELECT * FROM df WHERE UH.Loop.Load..kBTU.!=0)
}
df_ref <- sqldf('SELECT * FROM df WHERE UH.Loop.Load..kBTU.!=0')
df_ref <- sqldf('SELECT * FROM df WHERE UH.Loop.Load..kBTU.!=0')
df <- read.csv("D:\\Data\\Office_Docs\\Excel\\JohnEnoch_JBB_data.csv", header=TRUE)
for(i in seq(length(df$UH.Loop.Load..kBTU.))){
if(df[i,grep("UH.Loop.Load..kBTU.", colnames(df))]==0){
df[-c(i),]
}
}
View(df)
View(df)
df_ref <- df[df$UH.Loop.Load..kBTU.!= 0,]
View(df)
df_ref <- df[df$UH.Loop.Load..kBTU.!= 0.0,]
df <- read.csv("D:\\Data\\Office_Docs\\Excel\\JohnEnoch_JBB_data.csv", header=TRUE)
df_ref <- df[df$UH.Loop.Load..kBTU.!= 0.0,]
df <- read.csv("D:\\Data\\Office_Docs\\Excel\\JohnEnoch_JBB_data.csv", header=TRUE)
df_ref <- df[df$UH.Loop.Load..kBTU.!= 0.0,]
View(df_ref)
df <- read.csv("D:\\Data\\Office_Docs\\Excel\\JohnEnoch_JBB_data.csv", header=TRUE)
df_ref <- df[df$UH.Loop.Load..kBTU.!= 0.0,]
df_ref <- df[df$UH_LOOP_LOAD!= 0.0,]
df_ref <- df[df$UH_LOOP_LOAD == 0.0,]
df_ref <- df[df$UH_LOOP_LOAD!=0.0,]
View(df_ref)
df_ref <- df[c(df$UH_LOOP_LOAD!=0.0),]
df$UH_LOOP_LOAD
df_ref <- df[c(df$UH_LOOP_LOAD!="0.0"),]
View(df_ref)
df <- read.csv("D:\\Data\\Office_Docs\\Excel\\JohnEnoch_JBB_data.csv", header=TRUE)
df_ref <- df[c(df$UH_LOOP_LOAD!="0.0"),]
df <- read.csv("D:\\Data\\Office_Docs\\Excel\\JohnEnoch_JBB_data.csv", header=TRUE)
df_ref <- df[c(df$UH_LOOP_LOAD!="0.0"),]
View(df_ref)
df <- read.csv("D:\\Data\\Office_Docs\\Excel\\JohnEnoch_JBB_data.csv", header=TRUE)
df_ref <- df[c(df$UH_LOOP_LOAD!=0),]
View(df_ref)
typeof(df$UH_Loop_GPM)
typeof(df$UH_LOOP_LOAD)
df$UH_LOOP_LOAD
df_ref <- df[c(df$UH_LOOP_LOAD!=0),]
cols.num <- c("UH_LOOP_LOAD", "UH_LOOP_DT", "Upper_House_SEC_Ret_Temp", "Upper_House_SEC_Sup_Temp", "UH_Loop_GPM", "HDD", "OA_DB_Temp")
df_ref[cols.num] <- sapply(df[cols.num], as_numeric)
df_ref[cols.num] <- sapply(df[cols.num], as.numeric)
colnames(df)
df_ref <- df[c(df$UH_LOOP_LOAD!=0),]
cols.num <- c("UH_LOOP_LOAD", "UH_Loop_DT", "Upper_House_SEC_Ret_Temp", "Upper_House_SEC_Sup_Temp", "UH_Loop_GPM", "HDD", "OA_DB_Temp")
df_ref[cols.num] <- sapply(df[cols.num], as.numeric)
View(df_ref)
View(df)
df_ref <- df[c(df$UH_LOOP_LOAD!=0),]
cols.num <- c("UH_LOOP_LOAD", "UH_Loop_DT", "Upper_House_SEC_Ret_Temp", "Upper_House_SEC_Sup_Temp", "UH_Loop_GPM", "HDD", "OA_DB_Temp")
df_ref[cols.num] <- sapply(df[cols.num], double)
df <- read.csv("D:\\Data\\Office_Docs\\Excel\\test_JBB.csv", header=TRUE)
df_ref <- df[c(df$UH_LOOP_LOAD!=0),]
cols.num <- c("UH_LOOP_LOAD", "UH_Loop_DT", "Upper_House_SEC_Ret_Temp", "Upper_House_SEC_Sup_Temp", "UH_Loop_GPM", "HDD", "OA_DB_Temp")
df <- read.csv("D:\\Data\\Office_Docs\\Excel\\test_JBB.csv", header=TRUE)
df_ref <- df[c(df$UH_LOOP_LOAD!=0),]
typeof(df_ref$UH_Loop_DT)
#cols.num <- c("UH_LOOP_LOAD", "UH_Loop_DT", "Upper_House_SEC_Ret_Temp", "Upper_House_SEC_Sup_Temp", "UH_Loop_GPM", "HDD", "OA_DB_Temp")
#df_ref[cols.num] <- sapply(df[cols.num], double)
colnames(df_ref)
model <- lm(UH_LOOP_LOAD ~ UH_Loop_DT + HDD + Upper_House_SEC_Ret_Temp + Upper_House_SEC_Sup_Temp + UH_Loop_GPM + UH_P.19_VFD_Outpu + UH_P.20_VFD_Output, data=df_ref)
model <- lm(UH_LOOP_LOAD ~ UH_Loop_DT + HDD + Upper_House_SEC_Ret_Temp + Upper_House_SEC_Sup_Temp + UH_Loop_GPM + UH_P.19_VFD_Output + UH_P.20_VFD_Output, data=df_ref)
View(df_ref)
summary(model)
any(is.na(df_ref))
str(df_ref)
as.numeric(df_ref$UH_Loop_GPM)
df_ref$UH_Loop_GPM <- as.numeric(gsub(",", "",df_ref$UH_Loop_GPM))
str(df_ref)
df_ref$UH_Loop_GPM <- as.numeric(gsub(",", "",df_ref$UH_Loop_GPM))
df_ref$UH_LOOP_LOAD <- as.numeric(gsub(",", "",df_ref$UH_LOOP_LOAD))
str(df_ref)
model <- lm(UH_LOOP_LOAD ~ UH_Loop_DT + HDD + Upper_House_SEC_Ret_Temp + Upper_House_SEC_Sup_Temp + UH_Loop_GPM + UH_P.19_VFD_Output + UH_P.20_VFD_Output, data=df_ref)
summary(model)
library(VIF)
VIF(model)
vif(model)
str(df_ref)
df_ref <- df_ref[-c("UH_Loop_Status"),]
drops <- c("UH_Loop_Status")
df_ref <- df_ref[ , !(names(df_ref) %in% drops)]
df_ref$UH_Loop_GPM <- as.numeric(gsub(",", "",df_ref$UH_Loop_GPM))
df_ref$UH_LOOP_LOAD <- as.numeric(gsub(",", "",df_ref$UH_LOOP_LOAD))
str(df_ref)
corrplot(cor(df_ref))
library(corrplot)
corrplot(cor(df_ref))
model <- lm(UH_LOOP_LOAD ~ UH_Loop_DT + HDD + Upper_House_SEC_Ret_Temp + UH_Loop_GPM + UH_P.19_VFD_Output + UH_P.20_VFD_Output, data=df_ref)
summary(model)
plot(model)
plot(model)
corrplot(cor(df_ref))
vif(model)
model <- lm(UH_LOOP_LOAD ~ UH_Loop_DT, data=df_ref)
summary(model)
vif(model)
library(car)
vif(model)
model <- lm(UH_LOOP_LOAD ~ UH_Loop_DT + HDD + Upper_House_SEC_Ret_Temp + UH_Loop_GPM, data=df_ref)
vif(model)
str(df)
df_status <- df[c(df$UH_Loop_Status!=""),]
View(df_status)
str(df_status)
df_status$UH_Loop_GPM <- as.numeric(gsub(",", "",df_status$UH_Loop_GPM))
df_status$UH_LOOP_LOAD <- as.numeric(gsub(",", "",df_status$UH_LOOP_LOAD))
str(df_status)
df_status$UH_Loop_Status <- as.factor(df_status$UH_Loop_Status)
str(df_ref)
model_status <- lm(UH_LOOP_LOAD ~ UH_Loop_DT + HDD + Upper_House_SEC_Ret_Temp + UH_Loop_GPM + UH_Loop_Status, data=df_status)
summary(model_status)
vif(model_status)
model_status <- lm(UH_LOOP_LOAD ~ UH_Loop_DT + HDD + Upper_House_SEC_Ret_Temp + UH_Loop_Status, data=df_status)
summary(model_status)
vif(model_status)
plot(model_status)
plot(model)
df <- read.csv("D:\\Data\\Office_Docs\\Excel\\test_JBB.csv", header=TRUE)
View(df)
model <- lm(UH_LOOP_LOAD ~ UH_Loop_DT + HDD + Upper_House_SEC_Ret_Temp + UH_Loop_GPM, data=df_ref)
summary(model)
model_status <- lm(UH_LOOP_LOAD ~ UH_Loop_DT + HDD + Upper_House_SEC_Ret_Temp + UH_Loop_Status, data=df_status)
summary(model_status)
vif(model_status)
library(car)
library(VIF)
library(glmnet)
library(corrplot)
vif(model_status)
corrplot(cor(df_ref))
View(df_status)
View(df)
plot(model_status)
df_status2 <- df[c(df$UH_Loop_Status=="ON",)]
df_status2 <- df[c(df$UH_Loop_Status=="ON"),]
model_status2 <- lm(UH_LOOP_LOAD ~ UH_Loop_DT + HDD + Upper_House_SEC_Ret_Temp + UH_Loop_GPM, data=df_status2)
summary(model_status2)
